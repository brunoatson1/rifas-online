Criar usuário admin
bash
php artisan tinker
php
\App\Models\User::create([
    'name' => 'Admin',
    'email' => 'admin@example.com',
    'password' => bcrypt('senha123'),
    'is_admin' => true,
]);
7. Deploy na HostGator
Compactar o projeto localmente:

bash
zip -r rifas-online.zip . -x "node_modules/*" ".git/*" ".env"
Acessar o cPanel da HostGator

Criar banco de dados:

Acessar "MySQL Databases"

Criar novo banco de dados (ex: user_rifasonline)

Criar usuário e associar ao banco com todas as permissões

Enviar arquivos via FTP:

Conectar ao servidor via FileZilla

Enviar o arquivo ZIP para public_html

Extrair os arquivos (pode ser feito pelo cPanel > File Manager)

Configurar o .env no servidor:

ini
APP_NAME=Rifas Online
APP_ENV=production
APP_KEY=base64:... (gerar com php artisan key:generate)
APP_DEBUG=false
APP_URL=https://seusite.com

DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=user_rifasonline
DB_USERNAME=user_rifasuser
DB_PASSWORD=senha_segura

MERCADOPAGO_PUBLIC_KEY=sua_public_key
MERCADOPAGO_ACCESS_TOKEN=sua_access_token
Executar comandos via SSH:

bash
cd public_html

php composer.phar install --optimize-autoloader --no-dev

php artisan migrate --force
php artisan storage:link

php artisan config:cache
php artisan route:cache
php artisan view:cache

chmod -R 755 storage
chmod -R 755 bootstrap/cache
Configurar o .htaccess (public/.htaccess):

apache
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Handle Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
8. Testes Finais
Acesse o site e verifique se as rifas são exibidas

Faça login como usuário comum e teste a compra de bilhetes

Acesse /admin como usuário admin e verifique todas as funcionalidades

Teste o processo completo de sorteio

Observações Importantes
Para produção, configure corretamente:

Fila de e-mails (para notificações)

Backup automático do banco de dados

Monitoramento do site

Para melhor performance, considere:

Configurar cache com Redis

Usar um CDN para as imagens

Otimizar as consultas ao banco de dados

Para segurança:

Mantenha o Laravel e as dependências atualizadas

Use HTTPS

Restrinja o acesso ao painel admin por IP se necessário

Este sistema está completo com todas as funcionalidades básicas de um sistema de rifas online. Você pode expandir com recursos adicionais como:

Relatórios detalhados

Cupons de desconto

Sistema de afiliados

Integração com mais gateways de pagamento

Notificações por WhatsApp